[{"C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\index.js":"1","C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\App.js":"2","C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\components\\Calculator.js":"3","C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\Screen.js":"4","C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\Keyboard.js":"5"},{"size":509,"mtime":1620847022612,"results":"6","hashOfConfig":"7"},{"size":814,"mtime":1620950096777,"results":"8","hashOfConfig":"7"},{"size":1250,"mtime":1620994087279,"results":"9","hashOfConfig":"7"},{"size":199,"mtime":1620847393440,"results":"10","hashOfConfig":"7"},{"size":2912,"mtime":1620950482821,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"aldpjy",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\index.js",[],["24","25"],"C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\App.js",[],"C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\components\\Calculator.js",["26"],"import React, { useState } from \"react\";\r\nimport Keyboard from \"../Keyboard\";\r\nimport Screen from \"../Screen\";\r\n\r\nfunction Calculator() {\r\n  const [input, setInput] = useState(\"\");\r\n  //ADD INPUT\r\n  const addInput = (char) => {\r\n    let newInput = \"\";\r\n    if (input.length === 0) {\r\n      if (isNaN(Number(char))) {\r\n        newInput = [...input];\r\n        newInput += 0 + char;\r\n        setInput(newInput);\r\n        return;\r\n      } else {\r\n        newInput = [...input];\r\n        newInput += char;\r\n        setInput(newInput);\r\n        return;\r\n      }\r\n    }\r\n    newInput = input;\r\n    newInput += char;\r\n    setInput(newInput);\r\n  };\r\n  //CLEAR INPUT\r\n  const clearInput = () => {\r\n    setInput(\"\");\r\n  };\r\n  //CALCULATE\r\n\r\n  const calculate = () => {\r\n    //set input to the returned eval\r\n    try {\r\n      setInput(eval(input));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  // function evaluate(fn) {\r\n  //     return new Function(\"return \" + fn)();\r\n  // }\r\n\r\n  return (\r\n    <div className=\"calc\">\r\n      <Screen input={input} />\r\n      <Keyboard addInput={addInput} calculate={calculate} />\r\n      <div className=\"clearButton\" onClick={clearInput}>\r\n        c\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Calculator;\r\n","C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\Screen.js",[],"C:\\Users\\aqa khani\\react-practices\\reactpractice2\\src\\Keyboard.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":36,"column":16,"nodeType":"33","messageId":"34","endLine":36,"endColumn":20},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]