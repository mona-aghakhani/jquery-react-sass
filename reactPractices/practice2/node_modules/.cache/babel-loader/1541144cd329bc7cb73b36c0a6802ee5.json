{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aqa khani\\\\react-practices\\\\reactpractice2\\\\src\\\\components\\\\Calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Keyboard from '../Keyboard';\nimport Screen from '../Screen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calculator() {\n  _s();\n\n  const [input, setInput] = useState(''); //ADD INPUT\n\n  const addInput = char => {\n    var newInput = \"\";\n\n    if (input.length === 0) {\n      if (isNaN(Number(char))) {\n        newInput = [...input];\n        newInput += 0 + char;\n        setInput(newInput);\n        return;\n      } else {\n        newInput = [...input];\n        newInput += char;\n        setInput(newInput);\n        return;\n      }\n    }\n\n    newInput = input;\n    newInput += char;\n    setInput(newInput);\n  }; //CLEAR INPUT\n\n\n  const clearInput = () => {\n    setInput(\"\");\n  }; //CALCULATE\n\n\n  const calculate = () => {\n    //set input to the returned eval\n    try {\n      setInput(evaluate(input));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  function evaluate(fn) {\n    return new Function(\"return \" + fn)();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calc\",\n    children: [/*#__PURE__*/_jsxDEV(Screen, {\n      input: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      addInput: addInput,\n      calculate: calculate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clearButton\",\n      onClick: clearInput,\n      children: \"c\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calculator, \"WVveI0ACa0LqOSOlGzu58xcz+KE=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["C:/Users/aqa khani/react-practices/reactpractice2/src/components/Calculator.js"],"names":["React","useState","Keyboard","Screen","Calculator","input","setInput","addInput","char","newInput","length","isNaN","Number","clearInput","calculate","evaluate","e","console","log","fn","Function"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;AAEC,SAASC,UAAT,GAAsB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAmBL,QAAQ,CAAC,EAAD,CAAjC,CADkB,CAElB;;AACD,QAAMM,QAAQ,GAAIC,IAAD,IAAQ;AACrB,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAIJ,KAAK,CAACK,MAAN,KAAe,CAAnB,EAAqB;AACjB,UAAGC,KAAK,CAACC,MAAM,CAACJ,IAAD,CAAP,CAAR,EAAuB;AACnBC,QAAAA,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAX;AACAI,QAAAA,QAAQ,IAAI,IAAID,IAAhB;AACAF,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACA;AACH,OALD,MAKM;AACFA,QAAAA,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAX;AACAI,QAAAA,QAAQ,IAAID,IAAZ;AACAF,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACA;AACH;AACJ;;AACAA,IAAAA,QAAQ,GAAGJ,KAAX;AACDI,IAAAA,QAAQ,IAAGD,IAAX;AACAF,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACH,GAlBD,CAHmB,CAsBlB;;;AACA,QAAMI,UAAU,GAAE,MAAI;AACnBP,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAEF,GAHD,CAvBkB,CA2BnB;;;AAEA,QAAMQ,SAAS,GAAG,MAAM;AACpB;AACA,QAAG;AACCR,MAAAA,QAAQ,CAACS,QAAQ,CAACV,KAAD,CAAT,CAAR;AACH,KAFD,CAEE,OAAOW,CAAP,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,GAPD;;AASA,WAASD,QAAT,CAAkBI,EAAlB,EAAsB;AAClB,WAAO,IAAIC,QAAJ,CAAa,YAAYD,EAAzB,GAAP;AACH;;AAGD,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BAEI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEd;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEE,QAApB;AAA8B,MAAA,SAAS,EAAEO;AAAzC;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,OAAO,EAAED,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAnDST,U;;KAAAA,U;AAoDV,eAAeA,UAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport Keyboard from '../Keyboard'\r\nimport Screen from '../Screen'\r\n\r\n function Calculator() {\r\n     const [input, setInput]= useState('')\r\n     //ADD INPUT\r\n    const addInput = (char)=>{\r\n        var newInput = \"\";\r\n        if( input.length===0){\r\n            if(isNaN(Number(char))){\r\n                newInput = [...input];\r\n                newInput += 0 + char\r\n                setInput(newInput);\r\n                return\r\n            } else{\r\n                newInput = [...input];\r\n                newInput += char\r\n                setInput(newInput);\r\n                return\r\n            }\r\n        } \r\n         newInput = input;\r\n        newInput+= char;\r\n        setInput(newInput)\r\n    }\r\n     //CLEAR INPUT\r\n     const clearInput= ()=>{\r\n        setInput(\"\")\r\n\r\n     }\r\n    //CALCULATE\r\n\r\n    const calculate = () => {\r\n        //set input to the returned eval\r\n        try{\r\n            setInput(evaluate(input))\r\n        } catch (e){\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    function evaluate(fn) {\r\n        return new Function(\"return \" + fn)();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"calc\">\r\n           \r\n            <Screen input={input}/>\r\n            <Keyboard addInput={addInput} calculate={calculate}/>\r\n            <div className=\"clearButton\" onClick={clearInput}>c</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Calculator"]},"metadata":{},"sourceType":"module"}