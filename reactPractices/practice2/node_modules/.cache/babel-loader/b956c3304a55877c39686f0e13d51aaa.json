{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aqa khani\\\\react-practices\\\\reactpractice2\\\\src\\\\components\\\\Calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Keyboard from \"../Keyboard\";\nimport Screen from \"../Screen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calculator() {\n  _s();\n\n  const [input, setInput] = useState(\"\"); //ADD INPUT\n\n  const addInput = char => {\n    let newInput = \"\";\n\n    if (input.length === 0) {\n      if (isNaN(Number(char))) {\n        newInput = [...input];\n        newInput += 0 + char;\n        setInput(newInput);\n        return;\n      } else {\n        newInput = [...input];\n        newInput += char;\n        setInput(newInput);\n        return;\n      }\n    }\n\n    newInput = input;\n    newInput += char;\n    setInput(newInput);\n  }; //CLEAR INPUT\n\n\n  const clearInput = () => {\n    setInput(\"\");\n  }; //CALCULATE\n\n\n  const calculate = () => {\n    //set input to the returned eval\n    try {\n      setInput(eval(input));\n    } catch (e) {\n      console.log(e);\n    }\n  }; // function evaluate(fn) {\n  //     return new Function(\"return \" + fn)();\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calc\",\n    children: [/*#__PURE__*/_jsxDEV(Screen, {\n      input: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      addInput: addInput,\n      calculate: calculate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clearButton\",\n      onClick: clearInput,\n      children: \"c\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calculator, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["C:/Users/aqa khani/react-practices/reactpractice2/src/components/Calculator.js"],"names":["React","useState","Keyboard","Screen","Calculator","input","setInput","addInput","char","newInput","length","isNaN","Number","clearInput","calculate","eval","e","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC,CADoB,CAEpB;;AACA,QAAMM,QAAQ,GAAIC,IAAD,IAAU;AACzB,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAIJ,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAIC,KAAK,CAACC,MAAM,CAACJ,IAAD,CAAP,CAAT,EAAyB;AACvBC,QAAAA,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAX;AACAI,QAAAA,QAAQ,IAAI,IAAID,IAAhB;AACAF,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACA;AACD,OALD,MAKO;AACLA,QAAAA,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAX;AACAI,QAAAA,QAAQ,IAAID,IAAZ;AACAF,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACA;AACD;AACF;;AACDA,IAAAA,QAAQ,GAAGJ,KAAX;AACAI,IAAAA,QAAQ,IAAID,IAAZ;AACAF,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACD,GAlBD,CAHoB,CAsBpB;;;AACA,QAAMI,UAAU,GAAG,MAAM;AACvBP,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAFD,CAvBoB,CA0BpB;;;AAEA,QAAMQ,SAAS,GAAG,MAAM;AACtB;AACA,QAAI;AACFR,MAAAA,QAAQ,CAACS,IAAI,CAACV,KAAD,CAAL,CAAR;AACD,KAFD,CAEE,OAAOW,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAPD,CA5BoB,CAqCpB;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEX;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEE,QAApB;AAA8B,MAAA,SAAS,EAAEO;AAAzC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,OAAO,EAAED,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAlDQT,U;;KAAAA,U;AAmDT,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Keyboard from \"../Keyboard\";\r\nimport Screen from \"../Screen\";\r\n\r\nfunction Calculator() {\r\n  const [input, setInput] = useState(\"\");\r\n  //ADD INPUT\r\n  const addInput = (char) => {\r\n    let newInput = \"\";\r\n    if (input.length === 0) {\r\n      if (isNaN(Number(char))) {\r\n        newInput = [...input];\r\n        newInput += 0 + char;\r\n        setInput(newInput);\r\n        return;\r\n      } else {\r\n        newInput = [...input];\r\n        newInput += char;\r\n        setInput(newInput);\r\n        return;\r\n      }\r\n    }\r\n    newInput = input;\r\n    newInput += char;\r\n    setInput(newInput);\r\n  };\r\n  //CLEAR INPUT\r\n  const clearInput = () => {\r\n    setInput(\"\");\r\n  };\r\n  //CALCULATE\r\n\r\n  const calculate = () => {\r\n    //set input to the returned eval\r\n    try {\r\n      setInput(eval(input));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  // function evaluate(fn) {\r\n  //     return new Function(\"return \" + fn)();\r\n  // }\r\n\r\n  return (\r\n    <div className=\"calc\">\r\n      <Screen input={input} />\r\n      <Keyboard addInput={addInput} calculate={calculate} />\r\n      <div className=\"clearButton\" onClick={clearInput}>\r\n        c\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Calculator;\r\n"]},"metadata":{},"sourceType":"module"}